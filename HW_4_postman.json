{
	"info": {
		"_postman_id": "1bd8e732-ca9f-497f-98b9-f9f8bd61608c",
		"name": "HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json()\r",
							"console.log(jsonResponse)\r",
							"   \r",
							"\r",
							"    //Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(\"Dmitriy\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response equal age in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Sallary in response equal salary in request\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(100500);\r",
							"    });\r",
							"\r",
							"\r",
							"    ////Проверить, что salary в ответе равно salary_1_5_year s request (salary_1_5_year вбить руками.)\r",
							"    pm.test(\"U_salary in response equal u_salary in request\", function () {\r",
							"        pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(402000);\r",
							"    });\r",
							"\r",
							"\r",
							"    //Спарсить request\r",
							"let jsonReqeust = request.data\r",
							"console.log(jsonReqeust)\r",
							"\r",
							"    // Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust.name);\r",
							"});\r",
							"// console.log(jsonResponse.name)\r",
							"// console.log(jsonReqeust.name)\r",
							"\r",
							"\r",
							"    // Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Age in response equal age in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust.age);\r",
							"});\r",
							"// console.log(jsonResponse.age)\r",
							"// console.log(jsonReqeust.age)\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"let json_Reqeust = Number(jsonReqeust.salary)\r",
							"pm.test(\"Sallary in response equal salary in request\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(json_Reqeust);\r",
							"    });\r",
							"console.log(typeof(jsonResponse.salary))\r",
							"console.log(typeof(json_Reqeust))\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр family из response\r",
							"console.log(jsonResponse.family)\r",
							"\r",
							"\r",
							"    //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = jsonReqeust.salary * 4\r",
							"// console.log(salary_1_5)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year in response equal salary * 4\", function () {\r",
							"        pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(salary_1_5);\r",
							"    });\r",
							"\r",
							"// console.log(jsonResponse.family.u_salary_1_5_year)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitriy",
							"type": "default"
						},
						{
							"key": "age",
							"value": "37",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json()\r",
							"console.log(jsonResponse)\r",
							"\r",
							"//     //Спарсить request\r",
							"let jsonReqeust = pm.request.url.query.all()\r",
							"console.log(jsonReqeust)\r",
							"\r",
							"\r",
							"//     //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let jsonReqeust_Name = pm.request.url.query.get(\"name\")\r",
							"console.log(jsonReqeust_Name)\r",
							"\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust_Name);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let jsonReqeust_Age = pm.request.url.query.get(\"age\")\r",
							"console.log(jsonReqeust_Age)\r",
							"\r",
							"pm.test(\"Age in response equal age in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let jsonReqeust_Salary = pm.request.url.query.get(\"salary\")\r",
							"let json_Reqeust_Salary = Number(jsonReqeust_Salary)\r",
							"console.log(jsonReqeust_Salary)\r",
							"console.log(json_Reqeust_Salary)\r",
							"\r",
							"pm.test(\"Salary in response equal salary in request\", function () {\r",
							"    pm.expect(jsonResponse.salary).to.eql(json_Reqeust_Salary);\r",
							"});\r",
							"\r",
							"console.log(typeof(jsonResponse.salary))\r",
							"console.log(typeof(json_Reqeust_Salary))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Dmitriy&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		}
	]
}