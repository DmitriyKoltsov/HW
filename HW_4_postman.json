{
	"info": {
		"_postman_id": "cb1e615b-aa22-4d19-8b83-722b8b6c0dac",
		"name": "HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json()\r",
							"console.log(jsonResponse)\r",
							"   \r",
							"\r",
							"    //Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(\"Dmitriy\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response equal age in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Sallary in response equal salary in request\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(100500);\r",
							"    });\r",
							"\r",
							"\r",
							"    ////Проверить, что salary в ответе равно salary_1_5_year s request (salary_1_5_year вбить руками.)\r",
							"    pm.test(\"U_salary in response equal u_salary in request\", function () {\r",
							"        pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(402000);\r",
							"    });\r",
							"\r",
							"\r",
							"    //Спарсить request\r",
							"let jsonReqeust = request.data\r",
							"console.log(jsonReqeust)\r",
							"\r",
							"    // Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust.name);\r",
							"});\r",
							"// console.log(jsonResponse.name)\r",
							"// console.log(jsonReqeust.name)\r",
							"\r",
							"\r",
							"    // Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Age in response equal age in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust.age);\r",
							"});\r",
							"// console.log(jsonResponse.age)\r",
							"// console.log(jsonReqeust.age)\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"let json_Reqeust = Number(jsonReqeust.salary)\r",
							"pm.test(\"Sallary in response equal salary in request\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(json_Reqeust);\r",
							"    });\r",
							"console.log(typeof(jsonResponse.salary))\r",
							"console.log(typeof(json_Reqeust))\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр family из response\r",
							"console.log(jsonResponse.family)\r",
							"\r",
							"\r",
							"    //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = jsonReqeust.salary * 4\r",
							"// console.log(salary_1_5)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year in response equal salary * 4\", function () {\r",
							"        pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(salary_1_5);\r",
							"    });\r",
							"\r",
							"// console.log(jsonResponse.family.u_salary_1_5_year)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitriy",
							"type": "default"
						},
						{
							"key": "age",
							"value": "37",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json()\r",
							"// console.log(jsonResponse)\r",
							"\r",
							"//      //Спарсить request\r",
							"// let jsonReqeust = pm.request.url.query.all()\r",
							"let jsonReqeust = pm.request.url.query.toObject();\r",
							"console.log(jsonReqeust)\r",
							"\r",
							"\r",
							"     //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// let jsonReqeust_Name = pm.request.url.query.get(\"name\")\r",
							"// console.log(jsonReqeust_Name)\r",
							"\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust.name);\r",
							"});\r",
							"\r",
							"console.log(jsonReqeust.name)\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// let jsonReqeust_Age = pm.request.url.query.get(\"age\")\r",
							"// console.log(jsonReqeust_Age)\r",
							"\r",
							"// pm.test(\"Age in response equal age in request\", function () {\r",
							"//     pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"// });\r",
							"pm.test(\"Name in response equal name in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust.age);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// let jsonReqeust_Salary = pm.request.url.query.get(\"salary\")\r",
							"// let json_Reqeust_Salary = Number(jsonReqeust_Salary)\r",
							"// console.log(jsonReqeust_Salary)\r",
							"// console.log(json_Reqeust_Salary)\r",
							"\r",
							"let jsonReqeust_Salary = Number(jsonReqeust.salary)\r",
							"\r",
							"pm.test(\"Salary in response equal salary in request\", function () {\r",
							"    pm.expect(jsonResponse.salary).to.eql(jsonReqeust_Salary);\r",
							"});\r",
							"\r",
							"console.log(typeof(jsonResponse.salary))\r",
							"console.log(typeof(json_Reqeust_Salary))\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр family из response\r",
							"console.log(jsonResponse.family)\r",
							"\r",
							"\r",
							"    //Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"The dog parameter has name parameters\", function () {\r",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"The dog parameter has age parameters\", function () {\r",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"The dog parameter has age parameters\", function () {\r",
							"    pm.expect(jsonResponse.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"The dog parameter has age parameters\", function () {\r",
							"    pm.expect(jsonResponse.family.pets.dog.age).to.have.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitriy&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json();\r",
							"console.log(jsonResponse)\r",
							"\r",
							"\r",
							"    //Спарсить request\r",
							"// let jsonReqeust = pm.request.url.query.all()\r",
							"// console.log(jsonReqeust)\r",
							"let jsonReqeust = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"    // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// let jsonReqeustName = pm.request.url.query.get(\"name\")\r",
							"// console.log(jsonReqeustName)\r",
							"// console.log(jsonResponse.name)\r",
							"\r",
							"// pm.test(\"name in response is equal to name in request\", function () {\r",
							"//     pm.expect(jsonResponse.name).to.eql(jsonReqeustName);\r",
							"// });\r",
							"pm.test(\"name in response is equal to name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust.name);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// let jsonReqeustAge = pm.request.url.query.get(\"age\")\r",
							"let jsonReqeust_Age = Number(jsonReqeust.age)\r",
							"// console.log(jsonReqeust_Age)\r",
							"// console.log(jsonResponse.age)\r",
							"\r",
							"// pm.test(\"name in response is equal to name in request\", function () {\r",
							"//     pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"// });\r",
							"pm.test(\"name in response is equal to name in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"});\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр salary из request\r",
							"let jsonReqeustSalary = pm.request.url.query.get(\"salary\")\r",
							"console.log(jsonReqeustSalary)\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр salary из response\r",
							"console.log(jsonResponse.salary)\r",
							"\r",
							"\r",
							"    //Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonResponse.salary[0])\r",
							"\r",
							"\r",
							"     //Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonResponse.salary[1])\r",
							"\r",
							"\r",
							"    //Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonResponse.salary[2])\r",
							"\r",
							"\r",
							"    //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let jsonReqeust_Salary = Number(jsonReqeustSalary)\r",
							"\r",
							"\r",
							"pm.test(\"The 0th element of the salary parameter is equal to the salary from request\", function () {\r",
							"    pm.expect(jsonResponse.salary[0]).to.eql(jsonReqeust_Salary);\r",
							"});\r",
							"\r",
							"console.log(typeof(jsonResponse.salary[0]))\r",
							"console.log(typeof(jsonReqeust_Salary))\r",
							"\r",
							"\r",
							"    //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let jsonResponseSalary_1 = Number(jsonResponse.salary[1])\r",
							"\r",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*2 from request\", function () {\r",
							"    pm.expect(jsonResponseSalary_1).to.eql(jsonReqeust_Salary * 2);\r",
							"});\r",
							"\r",
							"console.log(jsonResponse.salary[1])\r",
							"console.log(typeof(jsonResponseSalary_1))\r",
							"\r",
							"\r",
							"    // Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let jsonResponseSalary_2 = Number(jsonResponse.salary[2])\r",
							"\r",
							"pm.test(\"The 2st element of the salary parameter is equal to salary*3 from request\", function () {\r",
							"    pm.expect(jsonResponseSalary_2).to.eql(jsonReqeust_Salary * 3);\r",
							"});\r",
							"\r",
							"\r",
							"    //Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let salary_array = jsonResponse.salary\r",
							"for (let i = 0; i < salary_array.length; i++){\r",
							"    console.log(salary_array[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dmitriy&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4_Environments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    //Спарсить response body в json\r",
							"let jsonResponse = pm.response.json();\r",
							"console.log(jsonResponse)\r",
							"\r",
							"\r",
							"    //Спарсить request\r",
							"// let jsonReqeust = pm.request.url.query.all()\r",
							"// console.log(jsonReqeust)\r",
							"let jsonReqeust = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"    // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// let jsonReqeustName = pm.request.url.query.get(\"name\")\r",
							"// console.log(jsonReqeustName)\r",
							"// console.log(jsonResponse.name)\r",
							"\r",
							"// pm.test(\"name in response is equal to name in request\", function () {\r",
							"//     pm.expect(jsonResponse.name).to.eql(jsonReqeustName);\r",
							"// });\r",
							"pm.test(\"name in response is equal to name in request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(jsonReqeust.name);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// let jsonReqeustAge = pm.request.url.query.get(\"age\")\r",
							"let jsonReqeust_Age = Number(jsonReqeust.age)\r",
							"// console.log(jsonReqeust_Age)\r",
							"// console.log(jsonResponse.age)\r",
							"\r",
							"// pm.test(\"name in response is equal to name in request\", function () {\r",
							"//     pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"// });\r",
							"pm.test(\"name in response is equal to name in request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(jsonReqeust_Age);\r",
							"});\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр salary из request\r",
							"let jsonReqeustSalary = pm.request.url.query.get(\"salary\")\r",
							"console.log(jsonReqeustSalary)\r",
							"\r",
							"\r",
							"    //Вывести в консоль параметр salary из response\r",
							"console.log(jsonResponse.salary)\r",
							"\r",
							"\r",
							"    //Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonResponse.salary[0])\r",
							"\r",
							"\r",
							"     //Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonResponse.salary[1])\r",
							"\r",
							"\r",
							"    //Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonResponse.salary[2])\r",
							"\r",
							"\r",
							"    //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let jsonReqeust_Salary = Number(jsonReqeustSalary)\r",
							"\r",
							"\r",
							"pm.test(\"The 0th element of the salary parameter is equal to the salary from request\", function () {\r",
							"    pm.expect(jsonResponse.salary[0]).to.eql(jsonReqeust_Salary);\r",
							"});\r",
							"\r",
							"console.log(typeof(jsonResponse.salary[0]))\r",
							"console.log(typeof(jsonReqeust_Salary))\r",
							"\r",
							"\r",
							"    //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let jsonResponseSalary_1 = Number(jsonResponse.salary[1])\r",
							"\r",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*2 from request\", function () {\r",
							"    pm.expect(jsonResponseSalary_1).to.eql(jsonReqeust_Salary * 2);\r",
							"});\r",
							"\r",
							"console.log(jsonResponse.salary[1])\r",
							"console.log(typeof(jsonResponseSalary_1))\r",
							"\r",
							"\r",
							"    // Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let jsonResponseSalary_2 = Number(jsonResponse.salary[2])\r",
							"\r",
							"pm.test(\"The 2st element of the salary parameter is equal to salary*3 from request\", function () {\r",
							"    pm.expect(jsonResponseSalary_2).to.eql(jsonReqeust_Salary * 3);\r",
							"});\r",
							"\r",
							"\r",
							"    //Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let salary_array = jsonResponse.salary\r",
							"for (let i = 0; i < salary_array.length; i++){\r",
							"    console.log(salary_array[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonResponse = pm.response.json();\r",
							"// console.log(jsonResponse)\r",
							"\r",
							"\r",
							"//Спарсить request.\r",
							"let jsonReqeust = request.data;\r",
							"// console.log(jsonReqeust)\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has a start_qa_salary parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has a qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has a qa_salary_after_12_months parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"   pm.test(\"Response has a qa_salary_after_1.5_year parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"}); \r",
							"\r",
							"\r",
							"    // Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has a qa_salary_after_3.5_year parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"}); \r",
							"\r",
							"\r",
							"    //Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has a person parameter\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property(\"person\");\r",
							"}); \r",
							"\r",
							"\r",
							"    //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let jsonReqeust_salary = jsonReqeust.salary\r",
							"let requestSalary = Number(jsonReqeust_salary)\r",
							"// console.log(jsonReqeust_salary)\r",
							"// console.log(typeof(jsonReqeust_salary))\r",
							"// console.log(requestSalary)\r",
							"// console.log(typeof(requestSalary))\r",
							"\r",
							"pm.test(\"start_qa_salary = salary из request\", function () {\r",
							"   pm.expect(jsonResponse.start_qa_salary).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let requestSalary_6 = requestSalary * 2\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months = salary * 2 из request\", function () {\r",
							"   pm.expect(jsonResponse.qa_salary_after_6_months).to.eql(requestSalary_6);\r",
							"});\r",
							"\r",
							"    // Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let requestSalary_12 = requestSalary * 2.7\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months = salary * 2.7 из request\", function () {\r",
							"   pm.expect(jsonResponse.qa_salary_after_12_months).to.eql(requestSalary_12);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let requestSalary_1_5_year = requestSalary * 3.3\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year = salary * 3.3 из request\", function () {\r",
							"   pm.expect(jsonResponse[\"qa_salary_after_1.5_year\"]).to.eql(requestSalary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"    //Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let requestSalary_3_5_years = requestSalary * 3.8\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_year = salary * 3.8 из request\", function () {\r",
							"   pm.expect(jsonResponse[\"qa_salary_after_3.5_years\"]).to.eql(requestSalary_3_5_years);\r",
							"});\r",
							"\r",
							"\r",
							"    // Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"In the person parameter, the 1st element from u_name is salary from request\", function () {\r",
							"   pm.expect(jsonResponse.person.u_name[1]).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// console.log(typeof(jsonResponse.person.u_name[1]))\r",
							"// console.log(typeof(requestSalary))\r",
							"\r",
							"\r",
							"    //Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"let ReqeustAge = Number(jsonReqeust.age)\r",
							"pm.test(\"u_age parameter is equal to age from request\", function () {\r",
							"   pm.expect(jsonResponse.person.u_age).to.eql(ReqeustAge);\r",
							"});\r",
							"\r",
							"// console.log(typeof(ReqeustAge))\r",
							"// console.log(typeof(jsonResponse.person.u_age))\r",
							"\r",
							"\r",
							"    //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let requestSalary_5_years = requestSalary * 4.2\r",
							"\r",
							"pm.test(\"Parameter u_salary_5_years is equal to salary * 4.2 from request\", function () {\r",
							"   pm.expect(jsonResponse.person.u_salary_5_years).to.eql(requestSalary_5_years);\r",
							"});\r",
							"\r",
							"\r",
							"    //Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let person of Object.entries(jsonResponse.person)){\r",
							"        let person_array = person\r",
							"        person_array.forEach(function(item){\r",
							"        console.log(item)\r",
							"    })\r",
							"}\r",
							"\r",
							"for (let m in jsonResponse.person) {\r",
							"        if (typeof(jsonResponse.person[m]) == \"object\") {\r",
							"        console.log(m)\r",
							"        for (let i = 0; i < Object.keys(jsonResponse.person[m]).length; i++) {\r",
							"            console.log(jsonResponse.person[m][i])\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        console.log(m + \" : \" + jsonResponse.person[m])\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}